<?php

use PHPUnit\Framework\TestCase;
use JRC\binn\core\NativeFactory;

require_once realpath(__DIR__ . '/../autoload.php');

/**
 * Description of NativeFactoryTest
 *
 * @author jaredclemence
 */
class NativeFactoryTest extends TestCase {

    private $factory;

    public function setUp() {
        $this->factory = new NativeFactory();
    }

    public function provideNoByteTestCases() {
        return [
            "Null" => ["\x00", null],
            "True" => ["\x01", true],
            "False" => ["\x02", false],
        ];
    }
    
    /**
     * @param type $byteStringSource
     * @param type $expectedResult
     * @dataProvider provideNoByteTestCases
     */
    public function testNoByteConversion($byteStringSource, $expectedResult) {
        $result = $this->factory->read($byteStringSource);
        $this->assertEquals($expectedResult, $result);
    }

    public function provideOneByteTestCases() {
        return [
            "UInt8 Test Positive" => ["\x20\x6B", 107],
            "Int8 Test Negative" => ["\x21\xEB", -21],
            "Int8 Test Positive" => ["\x21\x6B", 107],
        ];
    }
    /**
     * @param type $byteStringSource
     * @param type $expectedResult
     * @dataProvider provideOneByteTestCases
     */
    public function testOneByteConversions($byteStringSource, $expectedResult) {
        $result = $this->factory->read($byteStringSource);
        $this->assertEquals($expectedResult, $result);
    }

    public function provideTwoByteTestCases() {
        return [
            "UInt16"        => ["\x40\x4A\xEB", 19179],
            "Int16 Test 0"  => ["\x41\xCA\xEB", -13589],
            "Int16 Test 1"  => ["\x41\x4A\xEB", 19179],
            "Int16 Test 2"  => ["\x41\xfe\x38", -456], //test taken from specification example
        ];
    }

    /**
     * @param type $byteStringSource
     * @param type $expectedResult
     * @dataProvider provideTwoByteTestCases
     */
    public function testTwoByteConversions($byteStringSource, $expectedResult) {
        $result = $this->factory->read($byteStringSource);
        $this->assertEquals($expectedResult, $result);
    }

    public function provideFourByteTestCases() {
        return [
            "UInt32 Positive" => ["\x60\x22\xCF\x8A\xE8", 584026856],
            "Int32 Negative" => ["\x61\xA2\xCF\x8A\xE8", -1563456792],
            "Int32 Positive" => ["\x61\x22\xCF\x8A\xE8", 584026856],
            "Float Test 1" => ["\x62\xBA\xEF\xAA\xE0", -1.8285177648067500000000E-03],
            "Float Test 2" => ["\x62\x71\xEF\xAA\xE0", 2.3735517614953000000000E+30],
        ];
    }

    /**
     * @param type $byteStringSource
     * @param type $expectedResult
     * @dataProvider provideFourByteTestCases
     */
    public function testFourByteConversions($byteStringSource, $expectedResult) {
        $result = $this->factory->read($byteStringSource);
        $this->assertEquals($expectedResult, $result);
    }

    public function provideEightByteTestCases() {
        return [
            "UInt64"        =>["\x80\x7C\xE6\x6C\x50\xE2\x84\x00\x00", 9000000000000000000],
            "Int64 Test 1"  =>["\x81\xFC\xE6\x6C\x50\xE2\x84\x00\x00", -223372036854775808],
            "Int64 Test 2"  =>["\x81\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF", -1],
            "Int64 Test 3"  =>["\x81\x00\x00\x00\x00\x00\x00\x00\x00", 0],
            "Double Test 1" =>["\x82\xBF\x07\x3D\x5C\x03\xAF\xC0\x07", -4.432618152350190000000000000000000000000000000E-05],
            "Double Test 2" =>["\x82\x58\xA7\x3D\x5C\x03\xAF\xC0\x07", 1.1720834858738245E+119],
        ];
    }

    /**
     * @param type $byteStringSource
     * @param type $expectedResult
     * @dataProvider provideEightByteTestCases
     */
     public function testEightByteConversions($byteStringSource, $expectedResult) {
        $result = $this->factory->read($byteStringSource);
        $this->assertEquals($expectedResult, $result);
    }
    
    public function provideContainerConversions(){
        return [
            "LIST 1" =>["\xE0\x09\x02\xA0\x01a\x00\x20\x7B",["a",123]],
            "MAP 1" => ["\xE1\x11\x02\x00\x00\x00\x02\xA0\x01a\x00\x00\x00\x00\x05\x20\x7B",[2=>"a",5=>123]],
            "OBJECT"=> ["\xE2\x28\x03\x0Bjargonizing\x41\xFE\x38\x05jumpy\x40\x03\x15\x0Aschnozzles\x20\x7B", json_decode("{\"jargonizing\":-456,\"jumpy\":789,\"schnozzles\":123}")]
        ];
    }
    
    /**
     * @dataProvider provideContainerConversions
     */
    public function testContainerConversion($byteStringSource, $expectedResult ){
        $result = $this->factory->read($byteStringSource);
        $this->assertEquals($expectedResult, $result);
    }
    
    public function testCase4(){
        $data = "e2 80 00 1c 38 5c 08 50 44 46 5f 44 61 74 61 00 10 50 44 46 5f 44 61 74 61 5f 68 69 73 74 6f 72 79 e0 2e 01 e2 2b 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 00 08 50 44 46 5f 4e 61 6d 65 00 10 50 44 46 5f 4e 61 6d 65 5f 68 69 73 74 6f 72 79 e0 2e 01 e2 2b 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 00 1b 52 65 63 6f 72 64 20 44 61 74 61 20 46 69 6c 65 20 53 65 63 75 72 65 20 4b 65 79 a0 80 00 01 00 ce ed c1 02 20 72 06 e7 9e b2 9f 38 80 6e 8c 83 c3 bc 6e 16 12 66 ff 37 30 8c c3 f6 d3 7f d6 c7 29 a8 0f e4 2c 8c 74 0f 99 e1 09 7b 77 8d 66 75 96 cc 82 2b f5 f9 a9 58 64 5d 98 d6 01 43 37 c1 98 e4 64 fe cb db c2 bb 80 8c a0 d2 e7 b1 30 d5 77 c1 79 fa 04 fa ea 41 1c 22 51 8f ca 40 9a 3e 22 5f af 99 48 32 24 3a 6a f3 4c 12 82 7c 9a e1 24 92 e2 7f 68 aa af df 4a 86 aa ff eb 93 53 ce de 22 0c 98 52 f2 a5 83 0b 4a d2 1e 27 78 dd f3 da c6 22 c7 47 a5 14 b4 7a 59 b1 68 40 b9 66 7f 16 41 c9 4d 18 f2 42 3c 6c 54 14 0a 80 68 61 c1 08 39 97 17 9b 2c 1f 6e ad 6e ff 10 a5 35 be 33 ff 09 ba 45 47 18 d9 ae 94 7c 4f fe d7 f1 58 fb be 04 2b 3a 98 a7 2f ec 10 fd df 3f f2 93 b7 cf 3a b3 e2 9d 15 6c 5b a9 a3 25 13 19 60 c9 e7 dd a7 48 70 23 80 9d c0 db 85 55 e2 57 07 bb 95 e6 00 23 52 65 63 6f 72 64 20 44 61 74 61 20 46 69 6c 65 20 53 65 63 75 72 65 20 4b 65 79 5f 68 69 73 74 6f 72 79 e0 80 00 01 39 01 e2 80 00 01 33 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 80 00 01 00 ce ed c1 02 20 72 06 e7 9e b2 9f 38 80 6e 8c 83 c3 bc 6e 16 12 66 ff 37 30 8c c3 f6 d3 7f d6 c7 29 a8 0f e4 2c 8c 74 0f 99 e1 09 7b 77 8d 66 75 96 cc 82 2b f5 f9 a9 58 64 5d 98 d6 01 43 37 c1 98 e4 64 fe cb db c2 bb 80 8c a0 d2 e7 b1 30 d5 77 c1 79 fa 04 fa ea 41 1c 22 51 8f ca 40 9a 3e 22 5f af 99 48 32 24 3a 6a f3 4c 12 82 7c 9a e1 24 92 e2 7f 68 aa af df 4a 86 aa ff eb 93 53 ce de 22 0c 98 52 f2 a5 83 0b 4a d2 1e 27 78 dd f3 da c6 22 c7 47 a5 14 b4 7a 59 b1 68 40 b9 66 7f 16 41 c9 4d 18 f2 42 3c 6c 54 14 0a 80 68 61 c1 08 39 97 17 9b 2c 1f 6e ad 6e ff 10 a5 35 be 33 ff 09 ba 45 47 18 d9 ae 94 7c 4f fe d7 f1 58 fb be 04 2b 3a 98 a7 2f ec 10 fd df 3f f2 93 b7 cf 3a b3 e2 9d 15 6c 5b a9 a3 25 13 19 60 c9 e7 dd a7 48 70 23 80 9d c0 db 85 55 e2 57 07 bb 95 e6 00 07 61 6c 69 61 73 65 73 e0 06 01 a0 00 00 0f 61 6c 69 61 73 65 73 5f 68 69 73 74 6f 72 79 e0 33 01 e2 30 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 e0 06 01 a0 00 00 0e 61 6c 6c 65 72 67 69 65 73 5f 6c 69 73 74 e0 0c 01 a0 06 4d 6f 74 72 69 6e 00 16 61 6c 6c 65 72 67 69 65 73 5f 6c 69 73 74 5f 68 69 73 74 6f 72 79 e0 69 02 e2 36 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 34 36 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 e0 0c 01 a0 06 4d 6f 74 72 69 6e 00 e2 30 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 33 33 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 e0 06 01 a0 00 00 0b 61 70 74 5f 63 6f 6d 6d 65 6e 74 a0 17 4d 6f 6e 69 74 6f 72 20 52 65 73 75 6c 74 73 20 33 30 20 44 61 79 0d 00 13 61 70 74 5f 63 6f 6d 6d 65 6e 74 5f 68 69 73 74 6f 72 79 e0 47 01 e2 44 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 17 4d 6f 6e 69 74 6f 72 20 52 65 73 75 6c 74 73 20 33 30 20 44 61 79 0d 00 0b 61 70 74 5f 63 6f 6e 74 61 63 74 e0 03 00 13 61 70 74 5f 63 6f 6e 74 61 63 74 5f 68 69 73 74 6f 72 79 e0 6e 02 e2 2d 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 34 33 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 e0 03 00 e2 3e 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 e0 14 01 a0 0e 28 33 32 33 29 20 32 37 33 2d 35 31 33 38 00 0c 61 70 74 5f 64 75 72 61 74 69 6f 6e 20 0f 14 61 70 74 5f 64 75 72 61 74 69 6f 6e 5f 68 69 73 74 6f 72 79 e0 2f 01 e2 2c 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 20 0f 02 62 70 e2 17 02 04 64 69 61 73 a4 02 35 39 00 03 73 79 73 a4 03 31 31 31 00 0a 62 70 5f 68 69 73 74 6f 72 79 e0 44 01 e2 41 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 e2 17 02 04 64 69 61 73 a4 02 35 39 00 03 73 79 73 a4 03 31 31 31 00 03 64 6f 62 a1 19 32 30 31 30 2d 30 35 2d 31 34 20 30 30 3a 30 30 3a 30 30 2d 30 37 3a 30 30 00 0b 64 6f 62 5f 68 69 73 74 6f 72 79 e0 80 00 01 aa 06 e2 46 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 34 33 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a1 19 32 30 31 30 2d 30 35 2d 31 34 20 30 30 3a 30 30 3a 30 30 2d 30 37 3a 30 30 00 e2 46 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 34 33 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a1 19 32 30 31 30 2d 30 35 2d 31 34 20 30 30 3a 30 30 3a 30 30 2d 30 37 3a 30 30 00 e2 46 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a1 19 32 30 31 30 2d 30 35 2d 31 34 20 30 30 3a 30 30 3a 30 30 2d 30 37 3a 30 30 00 e2 46 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a1 19 32 30 31 30 2d 30 35 2d 31 34 20 30 30 3a 30 30 3a 30 30 2d 30 37 3a 30 30 00 e2 46 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a1 19 32 30 31 30 2d 30 35 2d 31 34 20 30 30 3a 30 30 3a 30 30 2d 30 37 3a 30 30 00 e2 46 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a1 19 32 30 31 30 2d 30 35 2d 31 34 20 30 30 3a 30 30 3a 30 30 2d 30 37 3a 30 30 00 07 64 6f 63 74 6f 72 73 e0 80 00 00 93 01 e2 80 00 00 8d 0a 04 63 69 74 79 a0 0b 42 61 6b 65 72 73 66 69 65 6c 64 00 06 63 6c 69 6e 69 63 a0 14 43 6c 69 6e 69 63 61 20 53 69 65 72 72 61 20 56 69 73 74 61 00 09 64 69 64 5f 72 65 66 65 72 01 02 69 64 20 00 0a 69 73 5f 70 72 69 6d 61 72 79 01 05 6c 69 6e 65 31 a0 0d 31 34 39 31 20 57 68 69 74 65 20 4c 6e 00 05 6c 69 6e 65 32 00 04 6e 61 6d 65 00 05 73 74 61 74 65 a0 02 43 41 00 03 7a 69 70 a4 05 39 33 33 30 37 00 0f 64 6f 63 74 6f 72 73 5f 68 69 73 74 6f 72 79 e0 80 00 00 c6 01 e2 80 00 00 c0 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 39 3a 32 30 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 e0 80 00 00 93 01 e2 80 00 00 8d 0a 04 63 69 74 79 a0 0b 42 61 6b 65 72 73 66 69 65 6c 64 00 06 63 6c 69 6e 69 63 a0 14 43 6c 69 6e 69 63 61 20 53 69 65 72 72 61 20 56 69 73 74 61 00 09 64 69 64 5f 72 65 66 65 72 01 02 69 64 20 00 0a 69 73 5f 70 72 69 6d 61 72 79 01 05 6c 69 6e 65 31 a0 0d 31 34 39 31 20 57 68 69 74 65 20 4c 6e 00 05 6c 69 6e 65 32 00 04 6e 61 6d 65 00 05 73 74 61 74 65 a0 02 43 41 00 03 7a 69 70 a4 05 39 33 33 30 37 00 03 64 6f 76 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 32 3a 33 30 3a 30 30 2d 30 37 3a 30 30 00 0b 64 6f 76 5f 68 69 73 74 6f 72 79 e0 49 01 e2 46 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 32 3a 33 30 3a 30 30 2d 30 37 3a 30 30 00 08 66 69 6c 65 50 61 74 68 a0 66 2f 4c 69 62 72 61 72 79 2f 57 65 62 53 65 72 76 65 72 2f 44 6f 63 75 6d 65 6e 74 73 2f 6d 65 64 66 61 63 65 2f 46 69 6c 65 53 79 73 74 65 6d 2f 46 69 6c 65 52 65 63 6f 72 64 53 74 6f 72 61 67 65 2f 52 6f 64 61 72 74 65 2e 52 61 75 6c 2e 32 30 31 30 30 35 31 34 2e 32 30 31 36 30 38 31 36 2e 76 69 73 69 74 00 10 66 69 6c 65 50 61 74 68 5f 68 69 73 74 6f 72 79 e0 80 00 01 1b 02 e2 80 00 00 96 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 32 39 20 31 33 3a 32 31 3a 30 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 66 2f 4c 69 62 72 61 72 79 2f 57 65 62 53 65 72 76 65 72 2f 44 6f 63 75 6d 65 6e 74 73 2f 6d 65 64 66 61 63 65 2f 46 69 6c 65 53 79 73 74 65 6d 2f 46 69 6c 65 52 65 63 6f 72 64 53 74 6f 72 61 67 65 2f 52 6f 64 61 72 74 65 2e 52 61 75 6c 2e 32 30 31 30 30 35 31 34 2e 32 30 31 36 30 38 31 36 2e 76 69 73 69 74 00 e2 7f 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 52 2f 76 61 72 2f 77 77 77 2f 6d 65 64 66 61 63 65 2f 46 69 6c 65 53 79 73 74 65 6d 2f 46 69 6c 65 52 65 63 6f 72 64 53 74 6f 72 61 67 65 2f 52 6f 64 61 72 74 65 2e 52 61 75 6c 2e 32 30 31 30 30 35 31 34 2e 32 30 31 36 30 38 31 36 2e 76 69 73 69 74 00 09 66 69 72 73 74 4e 61 6d 65 a0 04 52 61 75 6c 00 11 66 69 72 73 74 4e 61 6d 65 5f 68 69 73 74 6f 72 79 e0 34 01 e2 31 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 04 52 61 75 6c 00 0e 66 75 6c 6c 5f 73 69 62 5f 63 6f 75 6e 74 20 00 16 66 75 6c 6c 5f 73 69 62 5f 63 6f 75 6e 74 5f 68 69 73 74 6f 72 79 e0 2f 01 e2 2c 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 33 33 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 20 00 06 67 65 6e 64 65 72 a0 01 4d 00 0e 67 65 6e 64 65 72 5f 68 69 73 74 6f 72 79 e0 31 01 e2 2e 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 34 33 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 01 4d 00 0e 68 61 6c 66 5f 73 69 62 5f 63 6f 75 6e 74 20 00 16 68 61 6c 66 5f 73 69 62 5f 63 6f 75 6e 74 5f 68 69 73 74 6f 72 79 e0 2f 01 e2 2c 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 33 33 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 20 00 06 68 65 69 67 68 74 20 30 0e 68 65 69 67 68 74 5f 68 69 73 74 6f 72 79 e0 2f 01 e2 2c 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 30 38 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 20 30 02 68 72 20 59 0a 68 72 5f 68 69 73 74 6f 72 79 e0 2f 01 e2 2c 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 30 38 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 20 59 02 69 64 a0 24 52 6f 64 61 72 74 65 2e 52 61 75 6c 2e 32 30 31 30 30 35 31 34 2e 32 30 31 36 30 38 31 36 2e 76 69 73 69 74 00 0a 69 64 5f 68 69 73 74 6f 72 79 e0 54 01 e2 51 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 24 52 6f 64 61 72 74 65 2e 52 61 75 6c 2e 32 30 31 30 30 35 31 34 2e 32 30 31 36 30 38 31 36 2e 76 69 73 69 74 00 08 6c 61 73 74 4e 61 6d 65 a0 07 52 6f 64 61 72 74 65 00 10 6c 61 73 74 4e 61 6d 65 5f 68 69 73 74 6f 72 79 e0 37 01 e2 34 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 07 52 6f 64 61 72 74 65 00 0f 6c 61 73 74 5f 76 31 5f 66 69 6c 65 5f 69 64 a0 1e 52 6f 64 61 72 74 65 2e 52 61 75 6c 2e 32 30 31 30 30 35 31 34 2e 32 30 31 36 30 38 31 36 00 17 6c 61 73 74 5f 76 31 5f 66 69 6c 65 5f 69 64 5f 68 69 73 74 6f 72 79 e0 4e 01 e2 4b 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 1e 52 6f 64 61 72 74 65 2e 52 61 75 6c 2e 32 30 31 30 30 35 31 34 2e 32 30 31 36 30 38 31 36 00 10 6d 65 64 69 63 61 74 69 6f 6e 73 5f 6c 69 73 74 e0 21 01 e2 1e 03 04 64 6f 73 65 00 0b 69 6e 73 74 72 75 63 74 69 6f 6e 00 04 6e 61 6d 65 a0 00 00 18 6d 65 64 69 63 61 74 69 6f 6e 73 5f 6c 69 73 74 5f 68 69 73 74 6f 72 79 e0 4e 01 e2 4b 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 33 33 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 e0 21 01 e2 1e 03 04 64 6f 73 65 00 0b 69 6e 73 74 72 75 63 74 69 6f 6e 00 04 6e 61 6d 65 a0 00 00 04 6e 61 6d 65 a0 0d 52 6f 64 61 72 74 65 2c 20 52 61 75 6c 00 0c 6e 61 6d 65 5f 68 69 73 74 6f 72 79 e0 3d 01 e2 3a 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 0d 52 6f 64 61 72 74 65 2c 20 52 61 75 6c 00 02 6f 32 20 64 0a 6f 32 5f 68 69 73 74 6f 72 79 e0 2f 01 e2 2c 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 30 38 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 20 64 08 6f 62 6a 5f 74 79 70 65 a0 05 76 69 73 69 74 00 10 6f 62 6a 5f 74 79 70 65 5f 68 69 73 74 6f 72 79 e0 35 01 e2 32 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 31 3a 30 33 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 05 76 69 73 69 74 00 14 70 61 74 69 65 6e 74 5f 61 72 72 69 76 61 6c 5f 74 69 6d 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 33 34 2d 30 37 3a 30 30 00 1c 70 61 74 69 65 6e 74 5f 61 72 72 69 76 61 6c 5f 74 69 6d 65 5f 68 69 73 74 6f 72 79 e0 49 01 e2 46 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 33 34 2d 30 37 3a 30 30 00 0a 70 61 74 69 65 6e 74 5f 69 64 a0 20 37 38 63 62 61 66 65 65 37 30 64 64 38 30 66 66 65 64 64 35 35 37 37 31 36 65 38 62 61 37 30 35 00 12 70 61 74 69 65 6e 74 5f 69 64 5f 68 69 73 74 6f 72 79 e0 50 01 e2 4d 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 20 37 38 63 62 61 66 65 65 37 30 64 64 38 30 66 66 65 64 64 35 35 37 37 31 36 65 38 62 61 37 30 35 00 0f 70 61 74 69 65 6e 74 5f 69 6e 5f 72 6f 6f 6d a0 0a 46 72 6f 6e 74 20 45 63 68 6f 00 17 70 61 74 69 65 6e 74 5f 69 6e 5f 72 6f 6f 6d 5f 68 69 73 74 6f 72 79 e0 3a 01 e2 37 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 0a 46 72 6f 6e 74 20 45 63 68 6f 00 0a 73 61 76 65 5f 63 6f 75 6e 74 20 01 12 73 61 76 65 5f 63 6f 75 6e 74 5f 68 69 73 74 6f 72 79 e0 2f 01 e2 2c 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 20 01 05 73 74 61 66 66 a0 0b 41 61 72 6f 6e 20 42 61 6e 6b 73 00 0d 73 74 61 66 66 5f 68 69 73 74 6f 72 79 e0 3b 01 e2 38 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 0b 41 61 72 6f 6e 20 42 61 6e 6b 73 00 05 73 74 61 74 65 a0 23 6d 65 64 66 61 63 65 5c 76 32 5c 73 74 61 74 65 73 5c 43 6f 6e 73 75 6c 74 61 74 69 6f 6e 53 74 61 74 65 00 0d 73 74 61 74 65 5f 68 69 73 74 6f 72 79 e0 53 01 e2 50 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 23 6d 65 64 66 61 63 65 5c 76 32 5c 73 74 61 74 65 73 5c 43 6f 6e 73 75 6c 74 61 74 69 6f 6e 53 74 61 74 65 00 03 75 69 64 a0 2e 39 64 38 65 65 63 62 66 62 39 33 36 61 61 65 65 62 61 63 38 34 37 66 39 65 34 35 37 65 65 39 39 32 30 31 38 30 35 31 38 31 34 32 30 33 34 00 0b 75 69 64 5f 68 69 73 74 6f 72 79 e0 5e 01 e2 5b 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 2e 39 64 38 65 65 63 62 66 62 39 33 36 61 61 65 65 62 61 63 38 34 37 66 39 65 34 35 37 65 65 39 39 32 30 31 38 30 35 31 38 31 34 32 30 33 34 00 15 76 31 5f 64 69 61 73 74 6f 6c 69 63 5f 70 72 65 73 73 75 72 65 a4 02 35 39 00 1d 76 31 5f 64 69 61 73 74 6f 6c 69 63 5f 70 72 65 73 73 75 72 65 5f 68 69 73 74 6f 72 79 e0 32 01 e2 2f 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 30 38 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a4 02 35 39 00 0f 76 31 5f 66 69 6c 65 5f 68 69 73 74 6f 72 79 e0 45 02 a0 1e 32 30 31 36 30 38 31 36 2e 52 6f 64 61 72 74 65 2e 52 61 75 6c 2e 32 30 31 30 30 35 31 34 00 a0 1e 52 6f 64 61 72 74 65 2e 52 61 75 6c 2e 32 30 31 30 30 35 31 34 2e 32 30 31 36 30 38 31 36 00 17 76 31 5f 66 69 6c 65 5f 68 69 73 74 6f 72 79 5f 68 69 73 74 6f 72 79 e0 72 01 e2 6f 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 e0 45 02 a0 1e 32 30 31 36 30 38 31 36 2e 52 6f 64 61 72 74 65 2e 52 61 75 6c 2e 32 30 31 30 30 35 31 34 00 a0 1e 52 6f 64 61 72 74 65 2e 52 61 75 6c 2e 32 30 31 30 30 35 31 34 2e 32 30 31 36 30 38 31 36 00 0d 76 31 5f 70 63 70 5f 63 6c 69 6e 69 63 e2 80 00 00 8d 0a 04 63 69 74 79 a0 0b 42 61 6b 65 72 73 66 69 65 6c 64 00 06 63 6c 69 6e 69 63 a0 14 43 6c 69 6e 69 63 61 20 53 69 65 72 72 61 20 56 69 73 74 61 00 09 64 69 64 5f 72 65 66 65 72 01 02 69 64 20 00 0a 69 73 5f 70 72 69 6d 61 72 79 01 05 6c 69 6e 65 31 a0 0d 31 34 39 31 20 57 68 69 74 65 20 4c 6e 00 05 6c 69 6e 65 32 00 04 6e 61 6d 65 00 05 73 74 61 74 65 a0 02 43 41 00 03 7a 69 70 a4 05 39 33 33 30 37 00 15 76 31 5f 70 63 70 5f 63 6c 69 6e 69 63 5f 68 69 73 74 6f 72 79 e0 80 00 00 c0 01 e2 80 00 00 ba 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 39 3a 32 30 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 e2 80 00 00 8d 0a 04 63 69 74 79 a0 0b 42 61 6b 65 72 73 66 69 65 6c 64 00 06 63 6c 69 6e 69 63 a0 14 43 6c 69 6e 69 63 61 20 53 69 65 72 72 61 20 56 69 73 74 61 00 09 64 69 64 5f 72 65 66 65 72 01 02 69 64 20 00 0a 69 73 5f 70 72 69 6d 61 72 79 01 05 6c 69 6e 65 31 a0 0d 31 34 39 31 20 57 68 69 74 65 20 4c 6e 00 05 6c 69 6e 65 32 00 04 6e 61 6d 65 00 05 73 74 61 74 65 a0 02 43 41 00 03 7a 69 70 a4 05 39 33 33 30 37 00 1b 76 31 5f 73 69 63 6b 5f 73 69 62 6c 69 6e 67 5f 64 65 73 63 72 69 70 74 69 6f 6e a0 00 00 23 76 31 5f 73 69 63 6b 5f 73 69 62 6c 69 6e 67 5f 64 65 73 63 72 69 70 74 69 6f 6e 5f 68 69 73 74 6f 72 79 e0 30 01 e2 2d 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 33 33 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 00 00 14 76 31 5f 73 79 73 74 6f 6c 69 63 5f 70 72 65 73 73 75 72 65 a4 03 31 31 31 00 1c 76 31 5f 73 79 73 74 6f 6c 69 63 5f 70 72 65 73 73 75 72 65 5f 68 69 73 74 6f 72 79 e0 33 01 e2 30 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 30 38 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a4 03 31 31 31 00 17 76 65 72 73 69 6f 6e 31 5f 6c 61 73 74 53 74 61 67 65 53 74 61 72 74 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 39 3a 33 32 2d 30 37 3a 30 30 00 1f 76 65 72 73 69 6f 6e 31 5f 6c 61 73 74 53 74 61 67 65 53 74 61 72 74 5f 68 69 73 74 6f 72 79 e0 49 01 e2 46 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 39 3a 33 32 2d 30 37 3a 30 30 00 13 76 65 72 73 69 6f 6e 31 5f 6c 61 73 74 55 70 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 39 3a 33 32 2d 30 37 3a 30 30 00 1b 76 65 72 73 69 6f 6e 31 5f 6c 61 73 74 55 70 64 61 74 65 5f 68 69 73 74 6f 72 79 e0 49 01 e2 46 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 39 3a 33 32 2d 30 37 3a 30 30 00 1b 76 65 72 73 69 6f 6e 31 5f 73 69 63 6b 5f 73 69 62 6c 69 6e 67 5f 63 6f 75 6e 74 20 00 23 76 65 72 73 69 6f 6e 31 5f 73 69 63 6b 5f 73 69 62 6c 69 6e 67 5f 63 6f 75 6e 74 5f 68 69 73 74 6f 72 79 e0 2f 01 e2 2c 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 33 33 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 20 00 16 76 65 72 73 69 6f 6e 31 5f 74 69 6d 65 64 5f 68 69 73 74 6f 72 79 e0 80 00 00 c7 04 e0 2b 03 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 30 38 3a 35 39 3a 34 37 2d 30 37 3a 30 30 00 20 01 a0 07 43 72 65 61 74 65 64 00 e0 35 03 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 32 3a 33 30 3a 30 30 2d 30 37 3a 30 30 00 20 03 a0 11 41 70 70 6f 69 6e 74 6d 65 6e 74 20 53 74 61 72 74 00 e0 2b 03 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 33 34 2d 30 37 3a 30 30 00 20 03 a0 07 41 72 72 69 76 65 64 00 e0 36 03 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 39 3a 33 32 2d 30 37 3a 30 30 00 20 07 a0 12 57 61 69 74 69 6e 67 20 66 6f 72 20 44 6f 63 74 6f 72 00 1e 76 65 72 73 69 6f 6e 31 5f 74 69 6d 65 64 5f 68 69 73 74 6f 72 79 5f 68 69 73 74 6f 72 79 e0 80 00 00 fa 01 e2 80 00 00 f4 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 e0 80 00 00 c7 04 e0 2b 03 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 30 38 3a 35 39 3a 34 37 2d 30 37 3a 30 30 00 20 01 a0 07 43 72 65 61 74 65 64 00 e0 35 03 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 32 3a 33 30 3a 30 30 2d 30 37 3a 30 30 00 20 03 a0 11 41 70 70 6f 69 6e 74 6d 65 6e 74 20 53 74 61 72 74 00 e0 2b 03 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 33 34 2d 30 37 3a 30 30 00 20 03 a0 07 41 72 72 69 76 65 64 00 e0 36 03 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 39 3a 33 32 2d 30 37 3a 30 30 00 20 07 a0 12 57 61 69 74 69 6e 67 20 66 6f 72 20 44 6f 63 74 6f 72 00 0c 76 65 72 73 69 6f 6e 31 5f 75 69 64 a0 11 76 31 2d 35 31 38 34 31 34 37 31 33 36 33 31 38 37 00 14 76 65 72 73 69 6f 6e 31 5f 75 69 64 5f 68 69 73 74 6f 72 79 e0 41 01 e2 3e 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a0 11 76 31 2d 35 31 38 34 31 34 37 31 33 36 33 31 38 37 00 09 76 69 73 69 74 44 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 32 3a 33 30 3a 30 30 2d 30 37 3a 30 30 00 11 76 69 73 69 74 44 61 74 65 5f 68 69 73 74 6f 72 79 e0 49 01 e2 46 02 04 64 61 74 65 a1 19 32 30 31 38 2d 30 35 2d 31 38 20 31 34 3a 32 30 3a 33 34 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 32 3a 33 30 3a 30 30 2d 30 37 3a 30 30 00 0a 76 69 73 69 74 5f 63 69 74 79 00 12 76 69 73 69 74 5f 63 69 74 79 5f 68 69 73 74 6f 72 79 e0 2e 01 e2 2b 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 36 3a 34 38 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 00 06 77 65 69 67 68 74 20 42 0e 77 65 69 67 68 74 5f 68 69 73 74 6f 72 79 e0 2f 01 e2 2c 02 04 64 61 74 65 a1 19 32 30 31 36 2d 30 38 2d 31 36 20 31 33 3a 30 37 3a 30 38 2d 30 37 3a 30 30 00 05 76 61 6c 75 65 20 42";
        $hex_ascii = str_replace(" ", "", $data);
        $binary = hex2bin($hex_ascii);
        
        $factory = new NativeFactory();
        $start = microtime(true) * 1000;
        $stdClass = $factory->read($binary);
        $end = microtime(true) * 1000;
        
        $totalTime = $end-$start;
        
        $maxTime = 150;
        $this->assertLessThan( $maxTime, $totalTime, "The binary conversion takes less than {$maxTime} microseconds and would not significantly hold up the system's processes." );
    }

}
